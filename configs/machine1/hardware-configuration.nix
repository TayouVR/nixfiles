# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  # max int, the kernel will handle increasing user watches based on this limit, afaiu
  # https://github.com/NixOS/nixpkgs/pull/126777
  # https://github.com/torvalds/linux/commit/92890123749bafc317bbfacbe0a62ce08d78efb7
  # https://github.com/torvalds/linux/commit/ac7b79fd190b02e7151bc7d2b9da692f537657f3
  boot.kernel.sysctl."fs.inotify.max_user_instances" = 2147483647;
  boot.kernel.sysctl."fs.inotify.max_user_watches"   =   16777216; # this shouldn't be needed, but I keep running out

  boot.supportedFilesystems = [ "ntfs" "btrfs" ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/079e0b73-63ce-4e7d-8a9e-3bbea5ad658a";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/D3FA-8203";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/33179389-50a2-4076-88ed-22c32f591810"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp12s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp13s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

}
