From ca4026c00d6f6966f319482834ae0f4f9d3b1fc8 Mon Sep 17 00:00:00 2001
From: Sarah <xxklintan123xx@gmail.com>
Date: Thu, 20 Mar 2025 00:44:36 +0100
Subject: [PATCH 1/3] implement skeletal summary

---
 src/input.rs          |  20 ++++---
 src/input/skeletal.rs | 122 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 134 insertions(+), 8 deletions(-)

diff --git a/src/input.rs b/src/input.rs
index c74adf2..cede67f 100644
--- a/src/input.rs
+++ b/src/input.rs
@@ -491,17 +491,21 @@ impl<C: openxr_data::Compositor> vr::IVRInput010_Interface for Input<C> {
     fn GetSkeletalSummaryData(
         &self,
         action: vr::VRActionHandle_t,
-        _: vr::EVRSummaryType,
+        summary_type: vr::EVRSummaryType,
         data: *mut vr::VRSkeletalSummaryData_t,
     ) -> vr::EVRInputError {
-        crate::warn_unimplemented!("GetSkeletalSummaryData");
-        get_action_from_handle!(self, action, session_data, _action);
-        unsafe {
-            data.write(vr::VRSkeletalSummaryData_t {
-                flFingerSplay: [0.2; 4],
-                flFingerCurl: [0.0; 5],
-            })
+        get_action_from_handle!(self, action, session_data, action);
+
+        let ActionData::Skeleton { hand, hand_tracker } = action else {
+            return vr::EVRInputError::WrongType;
+        };
+
+        if let Some(hand_tracker) = hand_tracker.as_ref() {
+            self.get_bone_summary_from_hand_tracking(&self.openxr, &session_data, summary_type, data, hand_tracker, *hand);
+        } else {
+            self.get_estimated_bone_summary(&session_data, summary_type, data, *hand);
         }
+
         vr::EVRInputError::None
     }
     fn GetSkeletalBoneData(
diff --git a/src/input/skeletal.rs b/src/input/skeletal.rs
index 380554a..28164ef 100644
--- a/src/input/skeletal.rs
+++ b/src/input/skeletal.rs
@@ -159,6 +159,128 @@ impl<C: openxr_data::Compositor> Input<C> {
         *self.skeletal_tracking_level.write().unwrap() = vr::EVRSkeletalTrackingLevel::Full;
     }

+    pub(super) fn get_bone_summary_from_hand_tracking(
+        &self,
+        xr_data: &OpenXrData<C>,
+        session_data: &SessionData,
+        summary_type: vr::EVRSummaryType,
+        summary_data: *mut vr::VRSkeletalSummaryData_t,
+        hand_tracker: &xr::HandTracker,
+        hand: Hand,
+    ) {
+        let legacy = session_data.input_data.legacy_actions.get().unwrap();
+        let display_time = self.openxr.display_time.get();
+        let Some(raw) = match hand {
+            Hand::Left => &legacy.left_spaces,
+            Hand::Right => &legacy.right_spaces,
+        }
+        .try_get_or_init_raw(xr_data, session_data, &legacy.actions) else {
+            self.get_estimated_bone_summary(session_data, summary_type, summary_data, hand);
+            return;
+        };
+
+        let Some(joints) = raw.locate_hand_joints(hand_tracker, display_time).unwrap() else {
+            self.get_estimated_bone_summary(session_data, summary_type, summary_data, hand);
+            return;
+        };
+
+        let joints: Box<[_]> = joints
+            .into_iter()
+            .map(|joint_location| {
+                let position = joint_location.pose.position;
+                let orientation = joint_location.pose.orientation;
+                Affine3A::from_rotation_translation(
+                    Quat::from_xyzw(orientation.x, orientation.y, orientation.z, orientation.w),
+                    Vec3::from_array([position.x, position.y, position.z]),
+                )
+            })
+            .collect();
+
+        let mut finger_curls = [0.0; 5];
+        let finger_splay = [0.2; 4];
+
+        for i in 0..5 {
+            let (metacarpal, proximal, tip) = match i {
+                0 => (
+                    joints[xr::HandJoint::THUMB_METACARPAL],
+                    joints[xr::HandJoint::THUMB_PROXIMAL],
+                    joints[xr::HandJoint::THUMB_TIP],
+                ),
+                1 => (
+                    joints[xr::HandJoint::INDEX_METACARPAL],
+                    joints[xr::HandJoint::INDEX_PROXIMAL],
+                    joints[xr::HandJoint::INDEX_TIP],
+                ),
+                2 => (
+                    joints[xr::HandJoint::MIDDLE_METACARPAL],
+                    joints[xr::HandJoint::MIDDLE_PROXIMAL],
+                    joints[xr::HandJoint::MIDDLE_TIP],
+                ),
+                3 => (
+                    joints[xr::HandJoint::RING_METACARPAL],
+                    joints[xr::HandJoint::RING_PROXIMAL],
+                    joints[xr::HandJoint::RING_TIP],
+                ),
+                4 => (
+                    joints[xr::HandJoint::LITTLE_METACARPAL],
+                    joints[xr::HandJoint::LITTLE_PROXIMAL],
+                    joints[xr::HandJoint::LITTLE_TIP],
+                ),
+                _ => unreachable!(),
+            };
+
+            let metacarpal_proximal_delta = metacarpal.translation - proximal.translation;
+            let tip_proxiimal_delta = tip.translation - proximal.translation;
+
+            let dot = metacarpal_proximal_delta.dot(tip_proxiimal_delta);
+            let a = metacarpal_proximal_delta.length();
+            let b = tip_proxiimal_delta.length();
+
+            let curl = if a == 0.0 || b == 0.0 {
+                1.0
+            } else {
+                let ang_cos = (dot / (a * b)).clamp(-1.0, 1.0);
+                let ang = ang_cos.acos();
+
+                1.0 - (ang / PI)
+            };
+
+            finger_curls[i] = curl;
+        }
+
+        unsafe {
+            summary_data.write(vr::VRSkeletalSummaryData_t {
+                flFingerSplay: finger_splay,
+                flFingerCurl: finger_curls,
+            })
+        }
+
+        return;
+    }
+
+    pub(super) fn get_estimated_bone_summary(
+        &self,
+        session_data: &SessionData,
+        _: vr::EVRSummaryType,
+        summary_data: *mut vr::VRSkeletalSummaryData_t,
+        hand: Hand,
+    ) {
+        let legacy = self.get_finger_state(session_data, hand);
+
+        unsafe {
+            summary_data.write(vr::VRSkeletalSummaryData_t {
+                flFingerSplay: [0.2; 4],
+                flFingerCurl: [
+                    legacy.thumb,
+                    legacy.index,
+                    legacy.middle,
+                    legacy.ring,
+                    legacy.pinky,
+                ],
+            })
+        }
+    }
+
     pub(super) fn get_estimated_bones(
         &self,
         session_data: &SessionData,

From abad2bce81223607b819d4c36caf237691f6380b Mon Sep 17 00:00:00 2001
From: Sarah <xxklintan123xx@gmail.com>
Date: Thu, 20 Mar 2025 01:42:01 +0100
Subject: [PATCH 2/3] input: Format summarry code

---
 src/input.rs | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/src/input.rs b/src/input.rs
index cede67f..6a887ee 100644
--- a/src/input.rs
+++ b/src/input.rs
@@ -501,7 +501,14 @@ impl<C: openxr_data::Compositor> vr::IVRInput010_Interface for Input<C> {
         };

         if let Some(hand_tracker) = hand_tracker.as_ref() {
-            self.get_bone_summary_from_hand_tracking(&self.openxr, &session_data, summary_type, data, hand_tracker, *hand);
+            self.get_bone_summary_from_hand_tracking(
+                &self.openxr,
+                &session_data,
+                summary_type,
+                data,
+                hand_tracker,
+                *hand,
+            );
         } else {
             self.get_estimated_bone_summary(&session_data, summary_type, data, *hand);
         }

From 5fedcec86eb8b313575ce5a2c02c06aa101db7ae Mon Sep 17 00:00:00 2001
From: Sarah <xxklintan123xx@gmail.com>
Date: Thu, 20 Mar 2025 03:07:57 +0100
Subject: [PATCH 3/3] Satisfy clippy

---
 src/input/skeletal.rs | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/src/input/skeletal.rs b/src/input/skeletal.rs
index 28164ef..78b714b 100644
--- a/src/input/skeletal.rs
+++ b/src/input/skeletal.rs
@@ -199,7 +199,7 @@ impl<C: openxr_data::Compositor> Input<C> {
         let mut finger_curls = [0.0; 5];
         let finger_splay = [0.2; 4];

-        for i in 0..5 {
+        for (i, curl_value) in finger_curls.iter_mut().enumerate() {
             let (metacarpal, proximal, tip) = match i {
                 0 => (
                     joints[xr::HandJoint::THUMB_METACARPAL],
@@ -245,7 +245,7 @@ impl<C: openxr_data::Compositor> Input<C> {
                 1.0 - (ang / PI)
             };

-            finger_curls[i] = curl;
+            *curl_value = curl;
         }

         unsafe {
@@ -254,8 +254,6 @@ impl<C: openxr_data::Compositor> Input<C> {
                 flFingerCurl: finger_curls,
             })
         }
-
-        return;
     }

     pub(super) fn get_estimated_bone_summary(
